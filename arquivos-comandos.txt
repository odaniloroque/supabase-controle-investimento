# Comandos para configuração do projeto

# 1. Criar estrutura de pastas do projeto
mkdir backend frontend
cd backend

# 2. Inicializar o projeto backend
npm init -y
npm install express cors dotenv @supabase/supabase-js
npm install -D typescript @types/node @types/express @types/cors ts-node-dev
npx tsc --init

# 3. Instalação do Prisma e suas dependências
npm install prisma @prisma/client

# 4. Inicialização do Prisma
npx prisma init

# 5. Após configurar o schema.prisma, gerar o cliente Prisma
npx prisma generate

# 6. Criar a primeira migração do banco de dados
npx prisma migrate dev --name init

# 7. Para visualizar o banco de dados (interface gráfica)
npx prisma studio

# 8. Para atualizar o banco de dados após alterações no schema
npx prisma migrate dev

# 9. Para resetar o banco de dados (cuidado: isso apaga todos os dados)
npx prisma migrate reset

# 10. Para verificar o status das migrações
npx prisma migrate status

# 11. Para gerar o cliente Prisma após alterações no schema
npx prisma generate

# 12. Para verificar se há problemas no schema
npx prisma validate

# 13. Configurar o frontend com Next.js e Tailwind
cd ../frontend
npx create-next-app@latest . --typescript --tailwind --eslint
npm install @supabase/supabase-js

# 14. Scripts úteis para o backend (adicionar ao package.json)
# "dev": "ts-node-dev --respawn --transpile-only src/server.ts",
# "build": "tsc",
# "start": "node dist/server.js"

# 15. Scripts úteis para o frontend (já incluídos no package.json do Next.js)
# "dev": "next dev",
# "build": "next build",
# "start": "next start",
# "lint": "next lint"

# 16. Estrutura de pastas recomendada para o backend
# backend/
# ├── src/
# │   ├── config/
# │   │   └── supabase.ts
# │   ├── controllers/
# │   ├── services/
# │   ├── routes/
# │   ├── types/
# │   └── server.ts
# ├── prisma/
# │   └── schema.prisma
# ├── .env
# └── package.json

# 17. Estrutura de pastas recomendada para o frontend
# frontend/
# ├── src/
# │   ├── app/
# │   ├── components/
# │   ├── lib/
# │   │   └── supabase.ts
# │   └── types/
# ├── public/
# └── package.json

# 18. Comandos para rodar o projeto
# Terminal 1 (Backend):
# cd backend
# npm run dev

# Terminal 2 (Frontend):
# cd frontend
# npm run dev 